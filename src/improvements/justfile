# Create a new template or task
# e.g. just new [template|task]
new COMMAND="" TASK_TYPE="":
    #!/usr/bin/env bash
    set -euo pipefail
    
    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    show_usage() {
        echo
        echo "Usage: just new [template|task]"
        echo "Available commands:"
        echo "  • template  - Create a new template"
        echo "  • task      - Create a new task"
        echo
    }

    show_task_types() {
        echo
        echo "Available task types:"
        echo "  • l2taskbase - 'L2TaskBase' task type, these tasks require a superchain address registry and can iterate over multiple L2 chains"
        echo "    eg: https://github.com/ethereum-optimism/superchain-ops/blob/main/test/tasks/mock/template/GasConfigTemplate.sol"
        echo "  • simpletaskbase - 'SimpleTaskBase' task type, these tasks require simple key value registry and are independent of the L2 chains"
        echo "    eg: https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/template/FinanceTemplate.sol"
        echo "  • opcmtaskbase - 'OPCMTaskBase' task type, these tasks are used to make delegate calls to the Optimism Contracts Manager and are"
        echo "    dependent on the L2 chains and inherit from L2TaskBase"
        echo "    e.g.: https://github.com/ethereum-optimism/superchain-ops/blob/main/src/improvements/template/OPCMUpgradeV200.sol"
        echo
    }
    
    # shellcheck disable=SC2050
    case "{{COMMAND}}" in
        "")
            echo -e "\n\033[31mError: No command specified\033[0m"
            show_usage
            exit 1
            ;;
        template)
            if [ -z "{{TASK_TYPE}}" ]; then
                echo -e "\n\033[31mError: No task type specified\033[0m"
                show_task_types
                exit 1
            fi

            case "$(echo {{TASK_TYPE}} | tr '[:upper:]' '[:lower:]')" in
                l2taskbase)
                    TASK_TYPE="L2TaskBase"
                    ;;
                simpletaskbase)
                    TASK_TYPE="SimpleTaskBase"
                    ;;
                opcmtaskbase)
                    TASK_TYPE="OPCMTaskBase"
                    ;;
                *)
                    echo -e "\n\033[31mError: Invalid task type '{{TASK_TYPE}}'\033[0m"
                    show_task_types
                    exit 1
                    ;;
            esac
            echo -e "\nSelected task type: \033[33m $TASK_TYPE \033[0m"
            ./script/create-template.sh "$TASK_TYPE"
            ;;
        task)
            if [ -n "{{TASK_TYPE}}" ]; then
                echo -e "\n\033[31mError: Task type should not be specified for 'task' command\033[0m"
                exit 1
            fi
            ./script/create-task.sh
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m"
            show_usage
            exit 1
            ;;
    esac

task COMMAND="" NETWORK="":
    #!/usr/bin/env bash
    set -euo pipefail

    echo -e "\033[42m                          \033[0m"
    echo -e "\033[42m    superchain-ops cli    \033[0m"
    echo -e "\033[42m                          \033[0m"

    if [ "{{COMMAND}}" = "" ]; then
        echo -e "\n\033[31mError: No command specified\033[0m\n"
        exit 1
    fi

    # shellcheck disable=SC2194
    case "{{COMMAND}}" in
        ls)
            echo ""
            ./script/sorted-tasks.sh {{NETWORK}}
            ;;
        *)
            echo -e "\n\033[31mError: Invalid command '{{COMMAND}}'\033[0m\n"
            exit 1
            ;;
    esac

check-superchain-registry-latest:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    bash ${root_dir}/src/improvements/script/check-superchain-latest.sh

# this is command is mainly for CI testing purposes and not task developers
# task developers can run this locally, however it is expected that this
# command will be run mostly by CI.
simulate-all-templates:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    forge build

    # If the task is nested then we only simulate as the foundation.
    # In the future we could simulate as other nested safes. 
    # For testing purposes, we do not gain anything by simulating as other nested safes.
    nested_safe_name="foundation"
    simulation_count=0
    for task in ${root_dir}/test/tasks/example/*/*; do
        if [ -d "$task" ]; then
            ${root_dir}/src/improvements/script/simulate-task.sh $task $nested_safe_name
            simulation_count=$((simulation_count + 1))
        fi
    done
    echo "$simulation_count simulations run."
    template_count=$(find "${root_dir}/src/improvements/template" -type f ! -name "*.template.sol" ! -path "*/boilerplate/*" | wc -l | xargs)

    echo ""
    if [ "$simulation_count" -ne "$template_count" ]; then
        echo ""
        echo -e "\033[31mError: Not all templates files have a corresponding task. Please add a task for a template in ${root_dir}/src/improvements/tasks/example\033[0m" >&2
        echo -e "\033[31mSimulated $simulation_count out of $template_count templates\033[0m" >&2
        echo ""
        exit 1
    else
        echo -e "\033[32mSuccess: All templates have a corresponding task.\033[0m"
        echo ""
        exit 0
    fi

simulate-verify-task TASK="":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    forge build

    # If the task is nested then we only simulate as the foundation.
    # In the future we could simulate as other nested safes. 
    # For testing purposes, we do not gain anything by simulating as other nested safes.
    nested_safe_name="foundation"

    ${root_dir}/src/improvements/script/simulate-verify-task.sh {{TASK}} $nested_safe_name

simulate-stack NETWORK="" TASK="" OWNER_ADDRESS="0x0000000000000000000000000000000000000000":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    echo -e "\033[42m                                         \033[0m"
    echo -e "\033[42m    superchain-ops stacked simulation    \033[0m"
    echo -e "\033[42m                                         \033[0m"

    show_usage() {
        echo
        echo "Usage: just simulate-stack <network> [task] [owner-address]"
        echo "Available arguments:"
        echo "  • <network> - The network to simulate the stack for (e.g. 'sep', 'eth')"
        echo "  • [task]    - The task to simulate the stack for (e.g. '001-task-name')"
        echo "  • [owner-address]  - This is the address of the owner on the parent multisig that you want to simulate as. If not specified, the first owner will be used."
        echo
    }

    export FOUNDRY_PROFILE="${FOUNDRY_PROFILE:-default}"
    ETH_RPC_URL=$(just _fetch-rpc-url "{{NETWORK}}")
    
    echo -e "\n⏳ Stacked Task simulation in progress. This may take a while..."
    if [ -z "{{TASK}}" ]; then
        echo -e "⏳ You are simulating all tasks for network: {{NETWORK}}\n"
        just list-stack {{NETWORK}}
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateStack(string)" {{NETWORK}} --ffi --rpc-url $ETH_RPC_URL
    else
        echo -e "⏳ You are simulating the task: {{TASK}} for network: {{NETWORK}}\n"
        just list-stack {{NETWORK}} {{TASK}}
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateStack(string,string,address)" {{NETWORK}} {{TASK}} {{OWNER_ADDRESS}} --ffi --rpc-url $ETH_RPC_URL
    fi
    echo -e "\n⚠️ Please note: Some Tenderly links may not work when running a stacked simulation.⚠️"


list-stack NETWORK="" TASK="":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)

    show_usage() {
        echo
        echo "Usage: just list-stack <network> [task]"
        echo "This command will list all the tasks that can be simulated for a given network."
        echo "Available arguments:"
        echo "  • <network> - The network to simulate the stack for (e.g. 'sep', 'eth')"
        echo "  • [task]    - The task to simulate the stack for (e.g. '001-task-name')"
        echo
    }

    # Check if network arg exists
    if [ -z "{{NETWORK}}" ]; then
        echo -e "\n\033[31mError: No network specified\033[0m"
        show_usage
        exit 1
    fi

    # Check if task arg exists
    if [ -z "{{TASK}}" ]; then
        echo "Listing all tasks for network: {{NETWORK}}"
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string)" {{NETWORK}}
    else
        echo "Listing all tasks for network: {{NETWORK}} up to task: {{TASK}}"
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "listStack(string,string)" {{NETWORK}} {{TASK}}
    fi

########################
## Simulate command ##
########################

# This command is used to simulate a task. It automatically figures out if the safe is nested or not.
[no-cd] # This means that the $PWD is wherever this command is executed from.
simulate whichSafe="" hdPath="0":
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    root_just_file="${root_dir}/src/improvements/justfile"

    echo -e "\033[42m                                         \033[0m"
    echo -e "\033[42m     superchain-ops task simulation      \033[0m"
    echo -e "\033[42m                                         \033[0m"

    show_usage() {
        echo
        echo "Usage: just simulate [safe-name] [hd-path]"
        echo "Available arguments:"
        echo "  • [safe-name]  - e.g. foundation, council, chain-governor, foundation-operations, base-operations"
        echo "  • [hd-path]    - e.g. '0' for 'm/44'/60'/[hd-path]'/0/0' "
        echo ""
        echo "Environment variables:"
        echo "  • SIMULATE_WITHOUT_LEDGER - If set, the simulation will not use a ledger account. Instead, it will use the default foundry account (e.g. '1' or 'true')."
        echo "  • FORK_BLOCK_NUMBER - If set, the simulation will use a specific block number for the fork. Otherwise, it will use the latest block. (e.g. '22420467')"
    }

    if [ "{{whichSafe}}" = "-h" ] || [ "{{whichSafe}}" = "--help" ]; then
        show_usage
        exit 0
    fi

    network=$(basename "$(dirname "$PWD")")
    export FOUNDRY_PROFILE="${FOUNDRY_PROFILE:-default}"
    # ETH_RPC_URL=$(just _fetch-rpc-url $network)
    ETH_RPC_URL=$(just --justfile="$root_just_file" _fetch-rpc-url "$network")
    safe=$(just --justfile="$root_just_file" _fetch-safe "{{whichSafe}}")
    signer=$(just --justfile="$root_just_file" _fetch-signer "{{hdPath}}")
    fork_block_arg=$(just --justfile="$root_just_file" _fetch-fork-block-number)
    task_path=$(PWD)

    echo "⏳ Task simulation in progress. Some tasks take longer than others..."
    if [ -n "$task_path" ]; then
        echo -e "⏳ You are simulating task: $task_path\n"
        forge script ${root_dir}/src/improvements/tasks/StackedSimulator.sol:StackedSimulator --sig "simulateTask(string,address)" $task_path $safe --ffi --rpc-url $ETH_RPC_URL --sender $signer $fork_block_arg 
    fi

test:
    forge build
    forge test
    just simulate-all-templates

########################
## Helper functions ##
########################
# not intended for end users
_fetch-rpc-url NETWORK="":
    #!/usr/bin/env bash
    set -euo pipefail
    profile="${FOUNDRY_PROFILE:-default}"
    case "{{NETWORK}}" in
      sep)  yq eval ".profile.\"${profile}\".rpc_endpoints.sepolia" "$(git rev-parse --show-toplevel)/foundry.toml" ;;
      eth)  yq eval ".profile.\"${profile}\".rpc_endpoints.mainnet" "$(git rev-parse --show-toplevel)/foundry.toml" ;;
      *)    echo "Error: Invalid network '{{NETWORK}}'" >&2; exit 1 ;;
    esac

_fetch-fork-block-number:
    #!/usr/bin/env bash
    FORK_BLOCK_NUMBER=${FORK_BLOCK_NUMBER:-"-1"}
    if [ "${FORK_BLOCK_NUMBER}" = "-1" ]; then
        fork_block_arg=""
    else
        echo "⏳ Using fork block number from env: ${FORK_BLOCK_NUMBER}" >&2
        echo "--fork-block-number ${FORK_BLOCK_NUMBER}"
    fi

_fetch-signer hdPath:
    #!/usr/bin/env bash
    SIMULATE_WITHOUT_LEDGER=${SIMULATE_WITHOUT_LEDGER:-}
    if [ -z "${SIMULATE_WITHOUT_LEDGER}" ]; then
        signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
        echo "⏳ Simulating with ledger account: ${signer}" >&2
    else
        # Default signer: address(uint160(uint256(keccak256("foundry default caller"))))
        signer="0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38"
        echo "⏳ Simulating without ledger using the default foundry account: ${signer}" >&2
    fi
    echo "${signer}"

[no-cd] 
_fetch-safe whichSafe:
    #!/usr/bin/env bash
    set -euo pipefail
    root_dir=$(git rev-parse --show-toplevel)
    safe="0x0000000000000000000000000000000000000000" # Default to zero address for non-nested safes
    if [ -n "{{whichSafe}}" ]; then
        safe=$(bash ${root_dir}/src/improvements/script/get-safe.sh $PWD "{{whichSafe}}")
        echo "⏳ You're simulating as safe: $safe ({{whichSafe}})" >&2
    fi
    echo "${safe}"
