// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import {VmSafe} from "forge-std/Vm.sol";
import {Create2} from "lib/openzeppelin-contracts/contracts/utils/Create2.sol";
import {LibString} from "@solady/utils/LibString.sol";
import {stdToml} from "lib/forge-std/src/StdToml.sol";
import {SimpleTaskBase} from "src/improvements/tasks/types/SimpleTaskBase.sol";
import {Action} from "src/libraries/MultisigTypes.sol";

interface IOptimismPortal2 {
    function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes memory _data)
        external
        payable;
}

/// @notice Interface of the Create2 Preinstall in L2
interface ICreate2Deployer {
    function deploy(uint256 _value, bytes32 _salt, bytes memory _code) external;
}

interface IFeeSplitter {
    function initialize(address _sharesCalculator) external;
}

interface IProxy {
    function upgradeTo(address _implementation) external;

    function upgradeToAndCall(address _implementation, bytes memory _data) external payable returns (bytes memory);
}

/// @notice A template contract for chains to upgrade to the Revenue Share v1.0.0 implementation.
contract RevenueShareV100UpgradePath is SimpleTaskBase {
    using LibString for string;
    using stdToml for string;

    /// @notice Address of the Create2Deployer Preinstall on L2.
    address internal constant CREATE2_DEPLOYER = 0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2;
    /// @notice Address of the Sequencer Fee Vault Predeploy on L2.
    address internal constant SEQUENCER_FEE_VAULT = 0x4200000000000000000000000000000000000011;
    /// @notice Address of the Operator Fee Vault Predeploy on L2.
    address internal constant OPERATOR_FEE_VAULT = 0x420000000000000000000000000000000000001b;
    /// @notice Address of the Base Fee Vault Predeploy on L2.
    address internal constant BASE_FEE_VAULT = 0x4200000000000000000000000000000000000019;
    /// @notice Address of the L1 Fee Vault Predeploy on L2.
    address internal constant L1_FEE_VAULT = 0x420000000000000000000000000000000000001A;
    /// @notice Address of the FeeSplitter Predeploy on L2.
    address internal constant FEE_SPLITTER = 0x420000000000000000000000000000000000002B;

    /// @notice The creation code for each fee vault, fee splitter, and sc rev share calculator.
    /// @dev Obtained from https://github.com/defi-wonderland/optimism at commit 7234e26c8aeaa86d5537c62ed88670fcca8b859a
    bytes public constant operatorFeeVaultCreationCode =
        hex"60e060405234801561001057600080fd5b50604051610f3c380380610f3c83398101604081905261002f91610079565b6001600160a01b03831660a0526080829052828282806001811115610056576100566100cc565b60c081600181111561006a5761006a6100cc565b815250505050505050506100e2565b60008060006060848603121561008e57600080fd5b83516001600160a01b03811681146100a557600080fd5b602085015160408601519194509250600281106100c157600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60805160a05160c051610e176101256000396000818161028401526109e101526000818160e901526109710152600081816102b80152610a350152610e176000f3fe6080604052600436106100cb5760003560e01c806382356d8a1161007457806385b5b14d1161004e57806385b5b14d14610252578063d0e12f9014610272578063d3e5792b146102a657600080fd5b806382356d8a146102055780638312f1491461022757806384411d651461023c57600080fd5b80633ccfd60b116100a55780633ccfd60b1461017757806354fd4d501461019a57806366d003ac146101f057600080fd5b80630d9019e1146100d7578063307f2962146101355780633bbed4a01461015757600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b5061010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004610be5565b6102da565b005b34801561016357600080fd5b50610155610172366004610c2b565b6104a2565b34801561018357600080fd5b5061018c610622565b60405190815260200161012c565b3480156101a657600080fd5b506101e36040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b60405161012c9190610c48565b3480156101fc57600080fd5b5061010b61092a565b34801561021157600080fd5b5061021a610993565b60405161012c9190610d25565b34801561023357600080fd5b5061018c610a03565b34801561024857600080fd5b5061018c60005481565b34801561025e57600080fd5b5061015561026d366004610d39565b610a57565b34801561027e57600080fd5b5061021a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b257600080fd5b5061018c7f000000000000000000000000000000000000000000000000000000000000000081565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547401000000000000000000000000000000000000000080820460ff1692849290917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091169083600181111561041d5761041d610cbb565b0217905550600280547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517ff2ec44eb1c3b3acd547b76333eb2c4b27eee311860c57a9fdb04c95f62398fc8906104969083908590610d6f565b60405180910390a15050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610589576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffff00ff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff84811691821775010000000000000000000000000000000000000000001790935560408051939092168084526020840191909152917f62e69886a5df0ba8ffcacbfc1388754e7abd9bde24b036354c561f1acd4e45939101610496565b600061062c610a03565b4710156106e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b479050806000808282546106fa9190610d8a565b909155507fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba90508161072a61092a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152339082015260600160405180910390a17f38e04cbeb8c10f8f568618aa75be0f10b6729b8b4237743b4de20cbcde2839ee8161078861092a565b33610791610993565b6040516107a19493929190610dc9565b60405180910390a160016107b3610993565b60018111156107c4576107c4610cbb565b0361086f5760006107dc6107d661092a565b83610bbd565b90508061086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4665655661756c743a206661696c656420746f2073656e642045544820746f2060448201527f4c322066656520726563697069656e740000000000000000000000000000000060648201526084016106dd565b5090565b73420000000000000000000000000000000000001663c2b3e5ac8261089261092a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015262061a80602482015260606044820152600060648201526084016000604051808303818588803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050505090565b6002546000907501000000000000000000000000000000000000000000900460ff161561096e575060025473ffffffffffffffffffffffffffffffffffffffff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b60025460009077010000000000000000000000000000000000000000000000900460ff16156109de575060025474010000000000000000000000000000000000000000900460ff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b600254600090760100000000000000000000000000000000000000000000900460ff1615610a32575060015490565b507f000000000000000000000000000000000000000000000000000000000000000090565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805490829055600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905560408051828152602081018490527f895a067c78583e800418fabf3da26a9496aab2ff3429cebdf7fefa642b2e42039101610496565b6000610bca835a84610bd1565b9392505050565b6000806000806000858888f1949350505050565b600060208284031215610bf757600080fd5b813560028110610bca57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c2857600080fd5b50565b600060208284031215610c3d57600080fd5b8135610bca81610c06565b600060208083528351808285015260005b81811015610c7557858101830151858201604001528201610c59565b81811115610c87576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d21577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101610d338284610cea565b92915050565b600060208284031215610d4b57600080fd5b5035919050565b600060208284031215610d6457600080fd5b8151610bca81610c06565b60408101610d7d8285610cea565b610bca6020830184610cea565b60008219821115610dc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b84815273ffffffffffffffffffffffffffffffffffffffff84811660208301528316604082015260808101610e016060830184610cea565b9594505050505056fea164736f6c634300080f000a";
    bytes public constant sequencerFeeVaultCreationCode =
        hex"60e060405234801561001057600080fd5b50604051610f6b380380610f6b83398101604081905261002f91610079565b6001600160a01b03831660a0526080829052828282806001811115610056576100566100cc565b60c081600181111561006a5761006a6100cc565b815250505050505050506100e2565b60008060006060848603121561008e57600080fd5b83516001600160a01b03811681146100a557600080fd5b602085015160408601519194509250600281106100c157600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60805160a05160c051610e466101256000396000818161028f0152610a0101526000818160f401526109910152600081816102c30152610a550152610e466000f3fe6080604052600436106100d65760003560e01c806382356d8a1161007f57806385b5b14d1161005957806385b5b14d1461025d578063d0e12f901461027d578063d3e5792b146102b1578063d4ff9218146102e557600080fd5b806382356d8a146102105780638312f1491461023257806384411d651461024757600080fd5b80633ccfd60b116100b05780633ccfd60b1461018257806354fd4d50146101a557806366d003ac146101fb57600080fd5b80630d9019e1146100e2578063307f2962146101405780633bbed4a01461016257600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014c57600080fd5b5061016061015b366004610c14565b6102fa565b005b34801561016e57600080fd5b5061016061017d366004610c5a565b6104c2565b34801561018e57600080fd5b50610197610642565b604051908152602001610137565b3480156101b157600080fd5b506101ee6040518060400160405280600581526020017f312e362e3000000000000000000000000000000000000000000000000000000081525081565b6040516101379190610c77565b34801561020757600080fd5b5061011661094a565b34801561021c57600080fd5b506102256109b3565b6040516101379190610d54565b34801561023e57600080fd5b50610197610a23565b34801561025357600080fd5b5061019760005481565b34801561026957600080fd5b50610160610278366004610d68565b610a77565b34801561028957600080fd5b506102257f000000000000000000000000000000000000000000000000000000000000000081565b3480156102bd57600080fd5b506101977f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f157600080fd5b50610116610bdd565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190610d81565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e1576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547401000000000000000000000000000000000000000080820460ff1692849290917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091169083600181111561043d5761043d610cea565b0217905550600280547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517ff2ec44eb1c3b3acd547b76333eb2c4b27eee311860c57a9fdb04c95f62398fc8906104b69083908590610d9e565b60405180910390a15050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190610d81565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105a9576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffff00ff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff84811691821775010000000000000000000000000000000000000000001790935560408051939092168084526020840191909152917f62e69886a5df0ba8ffcacbfc1388754e7abd9bde24b036354c561f1acd4e459391016104b6565b600061064c610a23565b471015610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b4790508060008082825461071a9190610db9565b909155507fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba90508161074a61094a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152339082015260600160405180910390a17f38e04cbeb8c10f8f568618aa75be0f10b6729b8b4237743b4de20cbcde2839ee816107a861094a565b336107b16109b3565b6040516107c19493929190610df8565b60405180910390a160016107d36109b3565b60018111156107e4576107e4610cea565b0361088f5760006107fc6107f661094a565b83610bec565b90508061088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4665655661756c743a206661696c656420746f2073656e642045544820746f2060448201527f4c322066656520726563697069656e740000000000000000000000000000000060648201526084016106fd565b5090565b73420000000000000000000000000000000000001663c2b3e5ac826108b261094a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015262061a80602482015260606044820152600060648201526084016000604051808303818588803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b505050505090565b6002546000907501000000000000000000000000000000000000000000900460ff161561098e575060025473ffffffffffffffffffffffffffffffffffffffff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b60025460009077010000000000000000000000000000000000000000000000900460ff16156109fe575060025474010000000000000000000000000000000000000000900460ff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b600254600090760100000000000000000000000000000000000000000000900460ff1615610a52575060015490565b507f000000000000000000000000000000000000000000000000000000000000000090565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa9190610d81565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5e576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805490829055600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905560408051828152602081018490527f895a067c78583e800418fabf3da26a9496aab2ff3429cebdf7fefa642b2e420391016104b6565b6000610be761094a565b905090565b6000610bf9835a84610c00565b9392505050565b6000806000806000858888f1949350505050565b600060208284031215610c2657600080fd5b813560028110610bf957600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c5757600080fd5b50565b600060208284031215610c6c57600080fd5b8135610bf981610c35565b600060208083528351808285015260005b81811015610ca457858101830151858201604001528201610c88565b81811115610cb6576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101610d628284610d19565b92915050565b600060208284031215610d7a57600080fd5b5035919050565b600060208284031215610d9357600080fd5b8151610bf981610c35565b60408101610dac8285610d19565b610bf96020830184610d19565b60008219821115610df3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b84815273ffffffffffffffffffffffffffffffffffffffff84811660208301528316604082015260808101610e306060830184610d19565b9594505050505056fea164736f6c634300080f000a";
    bytes public constant baseFeeVaultCreationCode =
        hex"60e060405234801561001057600080fd5b50604051610f3c380380610f3c83398101604081905261002f91610079565b6001600160a01b03831660a0526080829052828282806001811115610056576100566100cc565b60c081600181111561006a5761006a6100cc565b815250505050505050506100e2565b60008060006060848603121561008e57600080fd5b83516001600160a01b03811681146100a557600080fd5b602085015160408601519194509250600281106100c157600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60805160a05160c051610e176101256000396000818161028401526109e101526000818160e901526109710152600081816102b80152610a350152610e176000f3fe6080604052600436106100cb5760003560e01c806382356d8a1161007457806385b5b14d1161004e57806385b5b14d14610252578063d0e12f9014610272578063d3e5792b146102a657600080fd5b806382356d8a146102055780638312f1491461022757806384411d651461023c57600080fd5b80633ccfd60b116100a55780633ccfd60b1461017757806354fd4d501461019a57806366d003ac146101f057600080fd5b80630d9019e1146100d7578063307f2962146101355780633bbed4a01461015757600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b5061010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004610be5565b6102da565b005b34801561016357600080fd5b50610155610172366004610c2b565b6104a2565b34801561018357600080fd5b5061018c610622565b60405190815260200161012c565b3480156101a657600080fd5b506101e36040518060400160405280600581526020017f312e362e3000000000000000000000000000000000000000000000000000000081525081565b60405161012c9190610c48565b3480156101fc57600080fd5b5061010b61092a565b34801561021157600080fd5b5061021a610993565b60405161012c9190610d25565b34801561023357600080fd5b5061018c610a03565b34801561024857600080fd5b5061018c60005481565b34801561025e57600080fd5b5061015561026d366004610d39565b610a57565b34801561027e57600080fd5b5061021a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b257600080fd5b5061018c7f000000000000000000000000000000000000000000000000000000000000000081565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547401000000000000000000000000000000000000000080820460ff1692849290917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091169083600181111561041d5761041d610cbb565b0217905550600280547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517ff2ec44eb1c3b3acd547b76333eb2c4b27eee311860c57a9fdb04c95f62398fc8906104969083908590610d6f565b60405180910390a15050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610589576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffff00ff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff84811691821775010000000000000000000000000000000000000000001790935560408051939092168084526020840191909152917f62e69886a5df0ba8ffcacbfc1388754e7abd9bde24b036354c561f1acd4e45939101610496565b600061062c610a03565b4710156106e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b479050806000808282546106fa9190610d8a565b909155507fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba90508161072a61092a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152339082015260600160405180910390a17f38e04cbeb8c10f8f568618aa75be0f10b6729b8b4237743b4de20cbcde2839ee8161078861092a565b33610791610993565b6040516107a19493929190610dc9565b60405180910390a160016107b3610993565b60018111156107c4576107c4610cbb565b0361086f5760006107dc6107d661092a565b83610bbd565b90508061086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4665655661756c743a206661696c656420746f2073656e642045544820746f2060448201527f4c322066656520726563697069656e740000000000000000000000000000000060648201526084016106dd565b5090565b73420000000000000000000000000000000000001663c2b3e5ac8261089261092a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015262061a80602482015260606044820152600060648201526084016000604051808303818588803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050505090565b6002546000907501000000000000000000000000000000000000000000900460ff161561096e575060025473ffffffffffffffffffffffffffffffffffffffff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b60025460009077010000000000000000000000000000000000000000000000900460ff16156109de575060025474010000000000000000000000000000000000000000900460ff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b600254600090760100000000000000000000000000000000000000000000900460ff1615610a32575060015490565b507f000000000000000000000000000000000000000000000000000000000000000090565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805490829055600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905560408051828152602081018490527f895a067c78583e800418fabf3da26a9496aab2ff3429cebdf7fefa642b2e42039101610496565b6000610bca835a84610bd1565b9392505050565b6000806000806000858888f1949350505050565b600060208284031215610bf757600080fd5b813560028110610bca57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c2857600080fd5b50565b600060208284031215610c3d57600080fd5b8135610bca81610c06565b600060208083528351808285015260005b81811015610c7557858101830151858201604001528201610c59565b81811115610c87576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d21577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101610d338284610cea565b92915050565b600060208284031215610d4b57600080fd5b5035919050565b600060208284031215610d6457600080fd5b8151610bca81610c06565b60408101610d7d8285610cea565b610bca6020830184610cea565b60008219821115610dc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b84815273ffffffffffffffffffffffffffffffffffffffff84811660208301528316604082015260808101610e016060830184610cea565b9594505050505056fea164736f6c634300080f000a";
    bytes public constant l1FeeVaultCreationCode =
        hex"60e060405234801561001057600080fd5b50604051610f3c380380610f3c83398101604081905261002f91610079565b6001600160a01b03831660a0526080829052828282806001811115610056576100566100cc565b60c081600181111561006a5761006a6100cc565b815250505050505050506100e2565b60008060006060848603121561008e57600080fd5b83516001600160a01b03811681146100a557600080fd5b602085015160408601519194509250600281106100c157600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60805160a05160c051610e176101256000396000818161028401526109e101526000818160e901526109710152600081816102b80152610a350152610e176000f3fe6080604052600436106100cb5760003560e01c806382356d8a1161007457806385b5b14d1161004e57806385b5b14d14610252578063d0e12f9014610272578063d3e5792b146102a657600080fd5b806382356d8a146102055780638312f1491461022757806384411d651461023c57600080fd5b80633ccfd60b116100a55780633ccfd60b1461017757806354fd4d501461019a57806366d003ac146101f057600080fd5b80630d9019e1146100d7578063307f2962146101355780633bbed4a01461015757600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b5061010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014157600080fd5b50610155610150366004610be5565b6102da565b005b34801561016357600080fd5b50610155610172366004610c2b565b6104a2565b34801561018357600080fd5b5061018c610622565b60405190815260200161012c565b3480156101a657600080fd5b506101e36040518060400160405280600581526020017f312e362e3000000000000000000000000000000000000000000000000000000081525081565b60405161012c9190610c48565b3480156101fc57600080fd5b5061010b61092a565b34801561021157600080fd5b5061021a610993565b60405161012c9190610d25565b34801561023357600080fd5b5061018c610a03565b34801561024857600080fd5b5061018c60005481565b34801561025e57600080fd5b5061015561026d366004610d39565b610a57565b34801561027e57600080fd5b5061021a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b257600080fd5b5061018c7f000000000000000000000000000000000000000000000000000000000000000081565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547401000000000000000000000000000000000000000080820460ff1692849290917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091169083600181111561041d5761041d610cbb565b0217905550600280547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517ff2ec44eb1c3b3acd547b76333eb2c4b27eee311860c57a9fdb04c95f62398fc8906104969083908590610d6f565b60405180910390a15050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105259190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610589576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffff00ff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff84811691821775010000000000000000000000000000000000000000001790935560408051939092168084526020840191909152917f62e69886a5df0ba8ffcacbfc1388754e7abd9bde24b036354c561f1acd4e45939101610496565b600061062c610a03565b4710156106e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4665655661756c743a207769746864726177616c20616d6f756e74206d75737460448201527f2062652067726561746572207468616e206d696e696d756d207769746864726160648201527f77616c20616d6f756e7400000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b479050806000808282546106fa9190610d8a565b909155507fc8a211cc64b6ed1b50595a9fcb1932b6d1e5a6e8ef15b60e5b1f988ea9086bba90508161072a61092a565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152339082015260600160405180910390a17f38e04cbeb8c10f8f568618aa75be0f10b6729b8b4237743b4de20cbcde2839ee8161078861092a565b33610791610993565b6040516107a19493929190610dc9565b60405180910390a160016107b3610993565b60018111156107c4576107c4610cbb565b0361086f5760006107dc6107d661092a565b83610bbd565b90508061086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4665655661756c743a206661696c656420746f2073656e642045544820746f2060448201527f4c322066656520726563697069656e740000000000000000000000000000000060648201526084016106dd565b5090565b73420000000000000000000000000000000000001663c2b3e5ac8261089261092a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015262061a80602482015260606044820152600060648201526084016000604051808303818588803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b505050505090565b6002546000907501000000000000000000000000000000000000000000900460ff161561096e575060025473ffffffffffffffffffffffffffffffffffffffff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b60025460009077010000000000000000000000000000000000000000000000900460ff16156109de575060025474010000000000000000000000000000000000000000900460ff1690565b507f000000000000000000000000000000000000000000000000000000000000000090565b600254600090760100000000000000000000000000000000000000000000900460ff1615610a32575060015490565b507f000000000000000000000000000000000000000000000000000000000000000090565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190610d52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f7cd7e09f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805490829055600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905560408051828152602081018490527f895a067c78583e800418fabf3da26a9496aab2ff3429cebdf7fefa642b2e42039101610496565b6000610bca835a84610bd1565b9392505050565b6000806000806000858888f1949350505050565b600060208284031215610bf757600080fd5b813560028110610bca57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c2857600080fd5b50565b600060208284031215610c3d57600080fd5b8135610bca81610c06565b600060208083528351808285015260005b81811015610c7557858101830151858201604001528201610c59565b81811115610c87576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d21577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60208101610d338284610cea565b92915050565b600060208284031215610d4b57600080fd5b5035919050565b600060208284031215610d6457600080fd5b8151610bca81610c06565b60408101610d7d8285610cea565b610bca6020830184610cea565b60008219821115610dc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b84815273ffffffffffffffffffffffffffffffffffffffff84811660208301528316604082015260808101610e016060830184610cea565b9594505050505056fea164736f6c634300080f000a";

    bytes public constant feeSplitterCreationCode =
        hex"";
    bytes public constant scRevShareCalculatorCreationCode =
        hex"6080604052348015600e575f80fd5b50604051610955380380610955833981016040819052602b916074565b5f80546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905560a0565b80516001600160a01b0381168114606f575f80fd5b919050565b5f80604083850312156084575f80fd5b608b83605a565b9150609760208401605a565b90509250929050565b6108a8806100ad5f395ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c80635b201d83116100725780637b42d6c2116100585780637b42d6c21461019157806396d842be1461019a5780639c662fdd146101b9575f80fd5b80635b201d831461016b578063712d7bb814610189575f80fd5b806329f33ec8146100a35780634b012e9a146100ed57806354e7f42d1461010257806354fd4d5014610122575b5f80fd5b6001546100c39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101006100fb3660046106a3565b6101cc565b005b6101156101103660046106c5565b610325565b6040516100e491906106f4565b61015e6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516100e49190610758565b61017461271081565b60405163ffffffff90911681526020016100e4565b61017460fa81565b6101746105dc81565b5f546100c39073ffffffffffffffffffffffffffffffffffffffff1681565b6101006101c73660046106a3565b610524565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610229573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061024d91906107ab565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b1576040517f67102c4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917fc7b7459ad1ab31862524bf0c4a5e6a8518c60f27607a5c483a58ea27e30c214c9190a35050565b6040805160028082526060828101909352816020015b604080518082019091525f808252602082015281526020019060019003908161033b575050604080518082019091525f805473ffffffffffffffffffffffffffffffffffffffff16825260208201819052825192935090918391906103a2576103a26107c6565b6020026020010181905250604051806040016040528060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f8152508160018151811061040c5761040c6107c6565b60209081029190910101525f82846104248789610820565b61042e9190610820565b6104389190610820565b90505f61271061044960fa84610839565b6104539190610850565b9050805f0361048e576040517f0174e42600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6104998584610888565b90505f6127106104ab6105dc84610839565b6104b59190610850565b90505f8184116104c557816104c7565b835b905080865f815181106104dc576104dc6107c6565b60209081029190910181015101526104f48186610888565b86600181518110610507576105076107c6565b602002602001015160200181815250505050505050949350505050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610581573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a591906107ab565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610609576040517f67102c4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f28c1e0a919cd3b91d6d516417dedc06a2bd7954ad8960315347250b1aee2a4f1905f90a35050565b73ffffffffffffffffffffffffffffffffffffffff811681146106a0575f80fd5b50565b5f602082840312156106b3575f80fd5b81356106be8161067f565b9392505050565b5f805f80608085870312156106d8575f80fd5b5050823594602084013594506040840135936060013592509050565b602080825282518282018190525f919060409081850190868401855b8281101561074b578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101610710565b5091979650505050505050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b5f602082840312156107bb575f80fd5b81516106be8161067f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115610833576108336107f3565b92915050565b8082028115828204841417610833576108336107f3565b5f82610883577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b81810381811115610833576108336107f356fea164736f6c6343000819000a";
    bytes public constant l1FeeWithdrawerCreationCode =
        hex"6080604052348015600e575f80fd5b50604051610914380380610914833981016040819052602b916054565b5f929092556001600160601b03909116600160a01b026001600160a01b039091161760015560a8565b5f805f606084860312156065575f80fd5b835160208501519093506001600160a01b03811681146082575f80fd5b60408501519092506001600160601b0381168114609d575f80fd5b809150509250925092565b61085f806100b55f395ff3fe608060405260043610610071575f3560e01c806366d003ac1161004c57806366d003ac146102b15780638312f1491461030257806385b5b14d14610324578063d1b2f1af14610343575f80fd5b80633bbed4a0146101df578063500bf72f146101fe57806354fd4d501461025c575f80fd5b366101db576040805134815247602082018190529133917f363f315f930a17d1266b86a20d6dd34b1cfbc5a9db9f13a65d06a689c3a2af8a910160405180910390a25f5481106101d9576001546040517fc2b3e5ac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152740100000000000000000000000000000000000000009091046bffffffffffffffffffffffff166024820152606060448201525f60648201527342000000000000000000000000000000000000169063c2b3e5ac9083906084015f604051808303818588803b158015610171575f80fd5b505af1158015610183573d5f803e3d5ffd5b505060015460405185815273ffffffffffffffffffffffffffffffffffffffff90911693507f6d92f7d3303f995bf21956bb0c51b388bae348eaf45c23debd2cfa3fcd9ec6469250602001905060405180910390a25b005b5f80fd5b3480156101ea575f80fd5b506101d96101f9366004610780565b610362565b348015610209575f80fd5b5060015461023a907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff90911681526020015b60405180910390f35b348015610267575f80fd5b506102a46040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60405161025391906107a2565b3480156102bc575f80fd5b506001546102dd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610253565b34801561030d575f80fd5b506103165f5481565b604051908152602001610253565b34801561032f575f80fd5b506101d961033e3660046107f5565b6104ce565b34801561034e575f80fd5b506101d961035d36600461080c565b6105f0565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103e39190610837565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610447576040517f807b982000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f62e69886a5df0ba8ffcacbfc1388754e7abd9bde24b036354c561f1acd4e459391015b60405180910390a15050565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561052b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054f9190610837565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b3576040517f807b982000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80549082905560408051828152602081018490527f895a067c78583e800418fabf3da26a9496aab2ff3429cebdf7fefa642b2e420391016104c2565b73420000000000000000000000000000000000001873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106719190610837565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f807b982000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180546bffffffffffffffffffffffff8381167401000000000000000000000000000000000000000081810273ffffffffffffffffffffffffffffffffffffffff85161790945560408051949093049091168084526020840191909152917f7eac5e944d98201db5ba6da6750238736aba8f3c071bc4ff89c395323646cef991016104c2565b73ffffffffffffffffffffffffffffffffffffffff8116811461077d575f80fd5b50565b5f60208284031215610790575f80fd5b813561079b8161075c565b9392505050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b5f60208284031215610805575f80fd5b5035919050565b5f6020828403121561081c575f80fd5b81356bffffffffffffffffffffffff8116811461079b575f80fd5b5f60208284031215610847575f80fd5b815161079b8161075c56fea164736f6c6343000819000a";

    /// @notice The withdrawal network configuration for each fee vault.
    uint8 baseFeeVaultWithdrawalNetwork;
    uint8 l1FeeVaultWithdrawalNetwork;
    uint8 sequencerFeeVaultWithdrawalNetwork;
    uint8 operatorFeeVaultWithdrawalNetwork;

    /// @notice The recipient configuration for each fee vault.
    address baseFeeVaultRecipient;
    address l1FeeVaultRecipient;
    address sequencerFeeVaultRecipient;
    address operatorFeeVaultRecipient;

    /// @notice The minimum withdrawal amount configuration for each fee vault.
    uint256 baseFeeVaultMinWithdrawalAmount;
    uint256 l1FeeVaultMinWithdrawalAmount;
    uint256 sequencerFeeVaultMinWithdrawalAmount;
    uint256 operatorFeeVaultMinWithdrawalAmount;

    /// @notice The configuration for l1 fee withdrawer.
    uint256 public l1WithdrawerMinWithdrawalAmount;
    address public l1WithdrawerRecipient;
    uint96 public l1WithdrawerGasLimit;

    /// @notice The configuration for sc rev share calculator.
    address public scRevShareCalcChainFeesRecipient;

    /// @notice The address of the OptimismPortal through which we are making the deposit txns
    address public portal;

    /// @notice The salt to be used for the L2 deployments
    bytes32 public salt;

    /// @notice Config value indicating if the chain is opting in to use FeeSplitter
    bool public optInRevenueShare;

    uint64 public deploymentGasLimit;

    /// @notice Returns the safe address string identifier.
    function safeAddressString() public pure override returns (string memory) {
        return "ProxyAdminOwner";
    }

    /// @notice Returns the storage write permissions required for this task. This is an array of
    /// contract names that are expected to be written to during the execution of the task.
    function _taskStorageWrites() internal pure virtual override returns (string[] memory) {
        string[] memory _storageWrites = new string[](1);
        _storageWrites[0] = "OptimismPortal";
        return _storageWrites;
    }

    /// @notice Returns an array of strings that refer to contract names in the address registry.
    /// Contracts with these names are expected to have their balance changes during the task.
    /// By default returns an empty array. Override this function if your task expects balance changes.
    function _taskBalanceChanges() internal view virtual override returns (string[] memory) {
        string[] memory _balanceChanges = new string[](1);
        _balanceChanges[0] = "OptimismPortal";
        return _balanceChanges;
    }

    /// @notice Sets up the template with implementation configurations from a TOML file.
    /// State overrides are not applied yet. Keep this in mind when performing various pre-simulation assertions in this function.
    function _templateSetup(string memory _taskConfigFilePath, address _rootSafe) internal override {
        string memory _toml = vm.readFile(_taskConfigFilePath);

        portal = _toml.readAddress(".portal");
        require(portal != address(0), "portal must be set (addresses.OptimismPortal or .portal)");

        optInRevenueShare = _toml.readBool(".optInRevenueShare");

        if (!optInRevenueShare) {
            // These configs are only relevant in case the chain is not opting to use the Fee Splitter

            // Check for Fee Vaults config
            // BaseFeeVault
            baseFeeVaultWithdrawalNetwork = uint8(_toml.readUint(".baseFeeVaultWithdrawalNetwork"));
            require(
                baseFeeVaultWithdrawalNetwork == 0 || baseFeeVaultWithdrawalNetwork == 1,
                "baseFeeVaultWithdrawalNetwork must be set to either 0 (L1) or 1 (L2) in config"
            );

            baseFeeVaultRecipient = _toml.readAddress(".baseFeeVaultRecipient");
            require(baseFeeVaultRecipient != address(0), "baseFeeVaultRecipient must be set in config");

            baseFeeVaultMinWithdrawalAmount = _toml.readUint(".baseFeeVaultMinWithdrawalAmount");

            // L1FeeVault
            l1FeeVaultWithdrawalNetwork = uint8(_toml.readUint(".l1FeeVaultWithdrawalNetwork"));
            require(
                l1FeeVaultWithdrawalNetwork == 0 || l1FeeVaultWithdrawalNetwork == 1,
                "l1FeeVaultWithdrawalNetwork must be set to either 0 (L1) or 1 (L2) in config"
            );

            l1FeeVaultRecipient = _toml.readAddress(".l1FeeVaultRecipient");
            require(l1FeeVaultRecipient != address(0), "l1FeeVaultRecipient must be set in config");

            l1FeeVaultMinWithdrawalAmount = _toml.readUint(".l1FeeVaultMinWithdrawalAmount");

            // SequencerFeeVault
            sequencerFeeVaultWithdrawalNetwork = uint8(_toml.readUint(".sequencerFeeVaultWithdrawalNetwork"));
            require(
                sequencerFeeVaultWithdrawalNetwork == 0 || sequencerFeeVaultWithdrawalNetwork == 1,
                "sequencerFeeVaultWithdrawalNetwork must be set to either 0 (L1) or 1 (L2) in config"
            );

            sequencerFeeVaultRecipient = _toml.readAddress(".sequencerFeeVaultRecipient");
            require(sequencerFeeVaultRecipient != address(0), "sequencerFeeVaultRecipient must be set in config");

            sequencerFeeVaultMinWithdrawalAmount = _toml.readUint(".sequencerFeeVaultMinWithdrawalAmount");

            // OperatorFeeVault
            operatorFeeVaultWithdrawalNetwork = uint8(_toml.readUint(".operatorFeeVaultWithdrawalNetwork"));
            require(
                operatorFeeVaultWithdrawalNetwork == 0 || operatorFeeVaultWithdrawalNetwork == 1,
                "operatorFeeVaultWithdrawalNetwork must be set to either 0 (L1) or 1 (L2) in config"
            );

            operatorFeeVaultRecipient = _toml.readAddress(".operatorFeeVaultRecipient");
            require(operatorFeeVaultRecipient != address(0), "operatorFeeVaultRecipient must be set in config");

            operatorFeeVaultMinWithdrawalAmount = _toml.readUint(".operatorFeeVaultMinWithdrawalAmount");
        } else {
            // Use the Fee Splitter predeploy, L2 Withdrawal Network and 0 for all the vaults

            // BaseFeeVault
            baseFeeVaultWithdrawalNetwork = 1;
            baseFeeVaultRecipient = FEE_SPLITTER;
            baseFeeVaultMinWithdrawalAmount = 0;

            // SequencerFeeVault
            sequencerFeeVaultWithdrawalNetwork = 1;
            sequencerFeeVaultRecipient = FEE_SPLITTER;
            sequencerFeeVaultMinWithdrawalAmount = 0;

            // L1FeeVault
            l1FeeVaultWithdrawalNetwork = 1;
            l1FeeVaultRecipient = FEE_SPLITTER;
            l1FeeVaultMinWithdrawalAmount = 0;

            // OperatorFeeVault
            operatorFeeVaultWithdrawalNetwork = 1;
            operatorFeeVaultRecipient = FEE_SPLITTER;
            operatorFeeVaultMinWithdrawalAmount = 0;
        }

        // L1Withdrawer
        l1WithdrawerMinWithdrawalAmount = _toml.readUint(".l1WithdrawerMinWithdrawalAmount");

        l1WithdrawerRecipient = _toml.readAddress(".l1WithdrawerRecipient");
        require(l1WithdrawerRecipient != address(0), "l1WithdrawerRecipient must be set in config");

        l1WithdrawerGasLimit = uint96(_toml.readUint(".l1WithdrawerGasLimit"));
        require(l1WithdrawerGasLimit > 0, "l1WithdrawerGasLimit must be greater than 0");

        salt = _toml.readBytes32(".salt");
        require(salt != bytes32(0), "salt must be set in the config");

        deploymentGasLimit = uint64(_toml.readUint(".deploymentGasLimit"));
        require(deploymentGasLimit > 0, "deploymentGasLimit must be set in config");
    }

    /// @notice Before implementing the `_build` function, template developers must consider the following:
    /// 1. Which Multicall contract does this template use — `Multicall3` or `Multicall3Delegatecall`?
    /// 2. Based on the contract, should the target be called using `call` or `delegatecall`?
    /// 3. Ensure that the call to the target uses the appropriate method (`call` or `delegatecall`) accordingly.
    /// Guidelines:
    /// - `Multicall3`:
    ///  If the template directly inherits from `L2TaskBase` or `SimpleTaskBase`, it uses the `Multicall3` contract.
    ///  In this case, calls to the target **must** use `call`, e.g.:
    ///  ` dgm.setRespectedGameType(IOptimismPortal2(payable(portalAddress)), cfg[chainId].gameType);`
    /// WARNING: Any state written to in this function will be reverted after the build function has been run.
    /// Do not rely on setting global variables in this function.
    function _build(address) internal override {
        address l1WithdrawerCalculatedAddress = _deployL1Withdrawer();
        address scRevShareCalculatorCalculatedAddress = _deploySCRevShareCalculator(l1WithdrawerCalculatedAddress);
        _deployFeeSplitter(scRevShareCalculatorCalculatedAddress);

        _deployFeeVaults();
    }

    /// @notice This method performs all validations and assertions that verify the calls executed as expected.
    function _validate(VmSafe.AccountAccess[] memory, Action[] memory, address) internal pure override {
        // TODO: Validate calls
    }

    /// @notice Override to return a list of addresses that should not be checked for code length.
    function _getCodeExceptions() internal view virtual override returns (address[] memory) {}

    /// @notice Deploys the fee vaults implementation and upgrades the proxies to the calculated addresses.
    function _deployFeeVaults() private {
        // Deploy the fee vaults
        // Deploy the operator fee vault
        bytes memory _operatorFeeVaultInitCode = bytes.concat(
            operatorFeeVaultCreationCode,
            abi.encode(
                operatorFeeVaultRecipient, operatorFeeVaultMinWithdrawalAmount, operatorFeeVaultWithdrawalNetwork
            )
        );
        address _operatorFeeVaultCalculatedAddress =
            _getCreate2Address(_operatorFeeVaultInitCode, CREATE2_DEPLOYER, salt);

        bytes memory _operatorFeeVaultCalldata =
            abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _operatorFeeVaultInitCode));

        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _operatorFeeVaultCalldata
        );

        // Upgrade the operator fee vault
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(OPERATOR_FEE_VAULT),
            0,
            deploymentGasLimit,
            false,
            abi.encodeCall(IProxy.upgradeTo, (address(_operatorFeeVaultCalculatedAddress)))
        );

        // Deploy the sequencer fee vault
        bytes memory _sequencerFeeVaultInitCode = bytes.concat(
            sequencerFeeVaultCreationCode,
            abi.encode(
                sequencerFeeVaultRecipient, sequencerFeeVaultMinWithdrawalAmount, sequencerFeeVaultWithdrawalNetwork
            )
        );
        address _sequencerFeeVaultCalculatedAddress =
            _getCreate2Address(_sequencerFeeVaultInitCode, CREATE2_DEPLOYER, salt);
        bytes memory _sequencerFeeVaultCalldata =
            abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _sequencerFeeVaultInitCode));
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _sequencerFeeVaultCalldata
        );
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(SEQUENCER_FEE_VAULT),
            0,
            deploymentGasLimit,
            false,
            abi.encodeCall(IProxy.upgradeTo, (address(_sequencerFeeVaultCalculatedAddress)))
        );

        // Deploy the base fee vault
        bytes memory _baseFeeVaultInitCode = bytes.concat(
            baseFeeVaultCreationCode,
            abi.encode(baseFeeVaultRecipient, baseFeeVaultMinWithdrawalAmount, baseFeeVaultWithdrawalNetwork)
        );
        address _baseFeeVaultCalculatedAddress = _getCreate2Address(_baseFeeVaultInitCode, CREATE2_DEPLOYER, salt);
        bytes memory _baseFeeVaultCalldata = abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _baseFeeVaultInitCode));
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _baseFeeVaultCalldata
        );
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(BASE_FEE_VAULT),
            0,
            deploymentGasLimit,
            false,
            abi.encodeCall(IProxy.upgradeTo, (address(_baseFeeVaultCalculatedAddress)))
        );

        // Deploy the l1 fee vault
        bytes memory _l1FeeVaultInitCode = bytes.concat(
            l1FeeVaultCreationCode,
            abi.encode(l1FeeVaultRecipient, l1FeeVaultMinWithdrawalAmount, l1FeeVaultWithdrawalNetwork)
        );
        address _l1FeeVaultCalculatedAddress = _getCreate2Address(_l1FeeVaultInitCode, CREATE2_DEPLOYER, salt);
        bytes memory _l1FeeVaultCalldata = abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _l1FeeVaultInitCode));
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _l1FeeVaultCalldata
        );
        IOptimismPortal2(payable(portal)).depositTransaction(
            address(L1_FEE_VAULT),
            0,
            deploymentGasLimit,
            false,
            abi.encodeCall(IProxy.upgradeTo, (address(_l1FeeVaultCalculatedAddress)))
        );
    }

    /// @notice Deploys the l1 fee withdrawer implementation using Create2.
    /// @return l1WithdrawerCalculatedAddress_ The calculated address of the l1 fee withdrawer.
    function _deployL1Withdrawer() private returns (address l1WithdrawerCalculatedAddress_) {
        // Deploy L1 Withdrawer
        bytes memory _l1WithdrawerInitCode = bytes.concat(
            l1FeeWithdrawerCreationCode,
            abi.encode(l1WithdrawerMinWithdrawalAmount, l1WithdrawerRecipient, l1WithdrawerGasLimit)
        );
        bytes memory _l1WithdrawerCalldata = abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _l1WithdrawerInitCode));

        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _l1WithdrawerCalldata
        );

        l1WithdrawerCalculatedAddress_ = _getCreate2Address(_l1WithdrawerInitCode, CREATE2_DEPLOYER, salt);
    }

    /// @notice Deploys the sc rev share calculator implementation using Create2.
    /// @param _l1WithdrawerAddress The address of the l1 fee withdrawer.
    /// @return scRevShareCalculatorCalculatedAddress_ The calculated address of the sc rev share calculator.
    function _deploySCRevShareCalculator(address _l1WithdrawerAddress)
        private
        returns (address scRevShareCalculatorCalculatedAddress_)
    {
        // Deploy SC Rev Share Calculator
        bytes memory _scRevShareCalculatorInitCode = bytes.concat(
            scRevShareCalculatorCreationCode, abi.encode(_l1WithdrawerAddress, scRevShareCalcChainFeesRecipient)
        );
        bytes memory _scRevShareCalculatorCalldata =
            abi.encodeCall(ICreate2Deployer.deploy, (0, salt, _scRevShareCalculatorInitCode));

        scRevShareCalculatorCalculatedAddress_ =
            _getCreate2Address(_scRevShareCalculatorInitCode, CREATE2_DEPLOYER, salt);

        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _scRevShareCalculatorCalldata
        );
    }

    /// @notice Deploys the fee splitter implementation using Create2.
    /// @param _sharesCalculator The address of the ISharesCalculator.
    function _deployFeeSplitter(address _sharesCalculator) private {
        // Deploy Fee Splitter
        bytes memory _feeSplitterCalldata = abi.encodeCall(ICreate2Deployer.deploy, (0, salt, feeSplitterCreationCode));
        address _feeSplitterCalculatedAddress = _getCreate2Address(feeSplitterCreationCode, CREATE2_DEPLOYER, salt);

        IOptimismPortal2(payable(portal)).depositTransaction(
            address(CREATE2_DEPLOYER), 0, deploymentGasLimit, false, _feeSplitterCalldata
        );

        IOptimismPortal2(payable(portal)).depositTransaction(
            address(FEE_SPLITTER),
            0,
            deploymentGasLimit,
            false,
            abi.encodeCall(
                IProxy.upgradeToAndCall,
                (address(_feeSplitterCalculatedAddress), abi.encodeCall(IFeeSplitter.initialize, (_sharesCalculator)))
            )
        );
    }

    /// @notice Calculates the Create2 address for a given init code, deployer, and salt.
    /// @param _initCode The init code for the contract.
    /// @param _deployer The address of the deployer.
    /// @param _salt The salt for the contract.
    /// @return The calculated address of the contract.
    function _getCreate2Address(bytes memory _initCode, address _deployer, bytes32 _salt)
        private
        pure
        returns (address)
    {
        bytes32 _hash = keccak256(abi.encodePacked(bytes1(0xff), _deployer, _salt, keccak256(_initCode)));
        return Create2.computeAddress(_salt, _hash, _deployer);
    }
}
